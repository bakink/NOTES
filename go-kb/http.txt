----------------------------------------------------
http server with timeout and such customization
----------------------------------------------------
https://golang.org/pkg/net/http/
s := &http.Server{
	Addr:           ":8080",
	Handler:        myHandler,
	ReadTimeout:    10 * time.Second,
	WriteTimeout:   10 * time.Second,
	MaxHeaderBytes: 1 << 20,
}
log.Fatal(s.ListenAndServe())

----------------------------------------------------
SOME GOOD EXAMPLES
----------------------------------------------------
Oauth : https://www.sohamkamani.com/golang/2018-06-24-oauth-with-golang/
extended http code: http://networkbit.ch/golang-http-client/
printing http requests to debug: https://medium.com/doing-things-right/pretty-printing-http-requests-in-golang-a918d5aaa000


----------------------------------------------------
printing request components for debugging
----------------------------------------------------

CALLING THE FUNCTION:
		// debug - print the request details
		fmt.Printf("--> %s\n\n", formatRequest(req))

THE FUNCTION:
// https://medium.com/doing-things-right/pretty-printing-http-requests-in-golang-a918d5aaa000
func formatRequest(r *http.Request) string {
	// Create return string
	var request []string
	// Add the request string
	url := fmt.Sprintf("%v %v %v", r.Method, r.URL, r.Proto)
	request = append(request, url)
	// Add the host
	request = append(request, fmt.Sprintf("Host: %v", r.Host))
	// Loop through headers
	for name, headers := range r.Header {
		name = strings.ToLower(name)
		for _, h := range headers {
			request = append(request, fmt.Sprintf("%v: %v", name, h))
		}
	}

	// If this is a POST, add post data
	if r.Method == "POST" {
		r.ParseForm()
		request = append(request, "\n")
		request = append(request, r.Form.Encode())
	}
	// Return the request as a string
	return strings.Join(request, "\n")
}
