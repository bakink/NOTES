===========
GOROUTINES
===========
2k mem, grows as needed (vs 1mb per thread in os threads)
Go does its own connection pooling - so, if there are many threads from programs, go sends them to OS only as needed

- SYNC PACKAGE
golang.org/pkg/sync
Main functions in sync package:
- WaitGroup
- Mutex
- RWMutex

Waitgroups - to make a goroutine wait on other goroutines
- Like a supervisor goroutine - waits for a collection of goroutines to finish
- normally, those goroutines are created by waitgroup itself
- waits for those children to complete and then continues its own execution

Mutexes - to manage shared memory
- In the example of db and cache queries - db is persistent - and for every DB query cache is updated
  - in the querydb function, querydb and querycache - if run as goroutines, both groutines will be accessing same memory
  - that will cause conflicts
  - mutexes help here
  
querycache(id)
{
value=getValFromCache
return value
}
querydb(id)
{
value=getValFromDB
setcache(id)=value
return value
}





