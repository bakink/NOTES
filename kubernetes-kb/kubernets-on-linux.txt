================================================
KUBERNETES ON LINUX - INSTALL, CONFIG, BASICS
================================================

From scratch - https://kubernetes.io/docs/setup/scratch/#software-binaries
-> to know a few things on downloads, network, keys etc
-> NOT really for full installation instructions

Using yum - https://www.linuxtechi.com/install-kubernetes-1-7-centos7-rhel7/
https://blog.alexellis.io/kubernetes-in-10-minutes/

These look full-fledged: 
BEST: (3 nodes, all are master and node at the same time - multimaster??)
  https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step/
  https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part2/
  
  Also look at https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/ (single master cluster)
  
  This seems a '10 minutes' thing:  https://blog.alexellis.io/kubernetes-in-10-minutes/
  
OTHER:
https://apassionatechie.wordpress.com/2017/11/28/kubernetes-from-scratch-on-ubuntu-16-04/

https://kubernetes.io/docs/setup/independent/install-kubeadm/
https://dzone.com/articles/how-to-get-kubernetes-running-on-your-own-ubuntu-m

============================
FIRST, A FEW THINGS
============================
https://kubernetes.io/docs/setup/independent/install-kubeadm/

Container Software -
runtime (CRI, Container Runtime Interface) - 
  Like Docker (other container runtimes are also supported)
  The container runtime used by default is Docker, which is enabled through the 
  built-in dockershim CRI implementation inside of the kubelet
  Others are: containerd (CRI plugin built into containerd), cri-o, frakti, rkt
        Refer to the CRI installation instructions for more information.

Master - 
kubeadm: the command to bootstrap the cluster.

Nodes - 
kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.

Client (CLI) -
kubectl: the command line util to talk to your cluster.

ETCD & API Server - 
https://apassionatechie.wordpress.com/2017/11/28/kubernetes-from-scratch-on-ubuntu-16-04/
Kubernetes use etcd, a distributed database with strong consistency data model 
to store the state of whole cluster. API Server is the only component that can talk to etcd directly, 
all other components (including kubelet) have to communicate through API Server. 

===================
DOWNLOAD
===================

From https://kubernetes.io/docs/setup/release/notes/
v1.12.0-rc.2
  Downloads for v1.12.0-rc.2
    kubernetes.tar.gz -> THIS (for what?)
    Client Binaries -> THIS
    Server Binaries -> THIS
    Node Binaries -> THIS


-rw-r--r--  1 myuser  Users   56850672 Oct 12 10:56 kubectl
-rw-r--r--@ 1 myuser  Users   14155276 Oct 12 10:49 kubernetes-client-darwin-amd64.tar.gz
-rw-r--r--  1 myuser  Users   22517760 Oct 12 11:17 kubernetes.tar
-rw-r--r--@ 1 myuser  Users  104282485 Oct 12 10:52 kubernetes-node-linux-amd64.tar.gz
-rw-r--r--@ 1 myuser  Users  422567880 Oct 12 10:57 kubernetes-server-linux-amd64.tar.gz

========================
HOSTNAMES, IP ADDRESSES
========================

Hostnames:
Master - kubemaster
    inet 10.10.11.10/24 brd 10.10.11.255 scope global noprefixroute enp0s8
    inet 192.168.11.10/24 brd 192.168.11.255 scope global noprefixroute enp0s9

Node1 - kubenode11 (1 for site1, 1 for node1)
Node2 - kubenode12 (1 for site1, 2 for node2)

===================
MASTER
===================

Method1: Via apt-get (possibly using yum also):
https://kubernetes.io/docs/setup/independent/install-kubeadm/
See section "Installing kubeadm, kubelet and kubectl"

Method2: Using the tar files - TBD
https://apassionatechie.wordpress.com/2017/11/28/kubernetes-from-scratch-on-ubuntu-16-04/
https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part2/

- DOCKER INSTALL
TBD - Not sure if it is really needed on master. TBD
-> However, at least if we run master and node on the same machine, Docker will be needed
See Appendix on this topic on how to install Docker

- SERVER SOFTWARE INSTALL
https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part2/

# cd /opt 
# tar -xzvf kubernetes-server-linux-amd64.tar.gz

# cp kubernetes/server/bin/{hyperkube,kubeadm,kube-apiserver,kubelet,kube-proxy} /usr/local/bin/

Set this in .profile of root
# export PATH=/opt/kubernetes/server/bin:$PATH

- CLIENT SOFTWARE INSTALL
NOTE- THIS MAY NOT BE NECESSARY - AS SERVER TAR HAS 'KUBECTL' ALSO

https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part2/

# tar xzfv /media/sf_mystage_host/kubernetes/kubernetes-server-linux-amd64.tar.gz
This will have just one file 'kubectl'
Copy that kubectl to /usr/local/bin

-------------------
ETCD INSTALL
-------------------
https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part3/

NOTE: This is direct install on machines. Instead, it can be installed in K8 pods or as Docker containers also 
      (refer to https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part3/)

- INSTALL
# mkdir -p /var/lib/etcd
# groupadd -f -g 1501 etcd
# useradd -c "Etcd key-value store user" -d /var/lib/etcd -s /bin/false -g etcd -u 1501 etcd
# chown -R etcd:etcd /var/lib/etcd

# cd /usr/local/src
# curl -ksL 'https://github.com/coreos/etcd/releases/download/v3.3.0/etcd-v3.3.0-linux-amd64.tar.gz' | tar -xzvf -
# cp etcd-v3.3.0-linux-amd64/etcd* /usr/local/bin

- CONFIG
Create the service on each node (master and nodes).
Note: 192.168.11.10 is the IP of the machine (and initial cluster has other machines that host etcd as a cluster)

# cat << EOF > /lib/systemd/system/etcd.service
[Unit]
Description=etcd key-value store
Documentation=https://github.com/coreos/etcd

[Service]
User=etcd
Type=notify
ExecStart=/usr/local/bin/etcd \\
 --name etcd0 \\
 --data-dir /var/lib/etcd \\
 --initial-advertise-peer-urls http://192.168.11.10:2380 \\
 --listen-peer-urls http://192.168.11.10:2380 \\
 --listen-client-urls http://192.168.11.10:2379,http://127.0.0.1:2379,http://192.168.11.10:4001 \\
 --advertise-client-urls http://192.168.11.10:2379,http://192.168.11.10:4001 \\
 --initial-cluster-token etcd-cluster-1 \\
 --initial-cluster etcd0=http://192.168.11.10:2380,etcd1=http://192.168.11.11:2380,etcd2=http://192.168.11.12:2380 \\
 --initial-cluster-state new \\
 --heartbeat-interval 1000 \\
 --election-timeout 5000
Restart=always
RestartSec=10s
LimitNOFILE=40000

[Install]
WantedBy=multi-user.target
EOF

- ETCD SERVICE SETUP
# systemctl daemon-reload
# systemctl enable etcd
# systemctl start etcd.service
# systemctl status -l etcd.service

- ETCD CLUSTER STATUS VERIFY
[root@kubemaster ~]# etcdctl cluster-health
member cefbcaac4f708449 is healthy: got healthy result from http://192.168.11.10:2379
cluster is healthy

-------------------
FLANNEL INSTALL
-------------------
Get the latest/recommended Flannel release from https://github.com/coreos/flannel/releases

- NETWORK CONFIG
https://icicimov.github.io/blog/kubernetes/Kubernetes-cluster-step-by-step-Part4/
NOTE: Without this, you will get this error when flanneld is run:  
         E1124 17:05:27.338513  8341 main.go:349] Couldn't fetch network config: 100: Key not found (/coreos.com) 
         
# etcdctl set /coreos.com/network/config '{ "Network": "100.64.0.0/16", "SubnetLen": 24, "Backend": {"Type": "vxlan"} }'
{ "Network": "100.64.0.0/16", "SubnetLen": 24, "Backend": {"Type": "vxlan"} }


- INSTALL
# mkdir /opt/flannel
# cd /opt/flannel
# tar tvfpz /media/sf_mystage_host/flannel/flannel-v0.10.0-linux-amd64.tar.gz
# cp flanneld /usr/local/bin/.

- INITIALIZE
# flanneld
TBD: This takes the NAT interface as default. To make it use a different one: https://stackoverflow.com/questions/47845739/configuring-flannel-to-use-a-non-default-interface-in-kubernetes
https://github.com/coreos/flannel/issues/426
--> WITH DIFFERENT INTERFACE
# flanneld --iface=enp0s8
I1124 17:12:19.135304    8830 main.go:488] Using interface with name enp0s8 and address 192.168.11.10
I1124 17:12:19.135370    8830 main.go:505] Defaulting external address to interface address (192.168.11.10)
I1124 17:12:19.135431    8830 main.go:235] Created subnet manager: Etcd Local Manager with Previous Subnet: None
I1124 17:12:19.135436    8830 main.go:238] Installing signal handlers
I1124 17:12:19.138745    8830 main.go:353] Found network config - Backend type: vxlan
I1124 17:12:19.138781    8830 vxlan.go:120] VXLAN config: VNI=1 Port=0 GBP=false DirectRouting=false
I1124 17:12:19.190239    8830 local_manager.go:234] Picking subnet in range 100.64.1.0 ... 100.64.255.0
I1124 17:12:19.191379    8830 local_manager.go:220] Allocated lease (100.64.53.0/24) to current node (192.168.11.10) 
I1124 17:12:19.191886    8830 main.go:300] Wrote subnet file to /run/flannel/subnet.env
I1124 17:12:19.191895    8830 main.go:304] Running backend.
I1124 17:12:19.229876    8830 vxlan_network.go:60] watching for new subnet leases
I1124 17:12:19.231694    8830 main.go:396] Waiting for 22h59m59.958772932s to renew lease
I1124 17:12:19.302950    8830 iptables.go:115] Some iptables rules are missing; deleting and recreating rules
I1124 17:12:19.302971    8830 iptables.go:137] Deleting iptables rule: -s 100.64.0.0/16 -j ACCEPT
I1124 17:12:19.338024    8830 iptables.go:137] Deleting iptables rule: -d 100.64.0.0/16 -j ACCEPT
I1124 17:12:19.352248    8830 iptables.go:125] Adding iptables rule: -s 100.64.0.0/16 -j ACCEPT
I1124 17:12:19.391676    8830 iptables.go:125] Adding iptables rule: -d 100.64.0.0/16 -j ACCEPT


===================
NODES
===================
For now, install stuff as done for master
TBD - what is that node tar for and how to use it


===========================
APPENDIX - DOCKER INSTALL
===========================
https://blog.dbi-services.com/docker-ce-on-oracle-enterprise-linux-7/

https://kubernetes.io/docs/setup/cri/ --> on different container technologies that can be used

From this: https://www.cyberciti.biz/faq/install-use-setup-docker-on-rhel7-centos7-linux/

# yum remove docker docker-common docker-selinux docker-engine
# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# yum install docker-ce

# systemctl enable docker.service 
# systemctl start docker.service ## <-- Start docker ##
# systemctl stop docker.service ## <-- Stop docker ##
# systemctl restart docker.service ## <-- Restart docker ##
# systemctl status docker.service ## <-- Get status of docker ##

# ip a
# ip a list docker0


===========================
CONTAINER-SELINUX INSTALL
===========================
Error referenced here:  https://blog.dbi-services.com/docker-ce-on-oracle-enterprise-linux-7/
Fix here: https://stackoverflow.com/questions/45272827/docker-ce-on-rhel-requires-container-selinux-2-9

While installing Docker, it may error out stating container-selinux has to be installed.

ERROR:
# yum install docker-ce
...
...
--> Finished Dependency Resolution
Error: Package: 3:docker-ce-18.09.0-3.el7.x86_64 (docker-ce-stable)
           Requires: container-selinux >= 2.9

HOW TO INSTALL CONTAINER-SELINUX:
Installing the Selinux from the Centos repository worked for me: 
1. Go to http://mirror.centos.org/centos/7/extras/x86_64/Packages/ 
2. Find the latest version for container-selinux i.e. container-selinux-2.21-1.el7.noarch.rpm 
3. Run the following command on your terminal: $ sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/**Add_current_container-selinux_package_here** 
4. The command should looks like the following $ sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm 

NOTE:  Downloaded container-selinux-2.68-1.el7.noarch.rpm 
       Installed using rpm -Uvh container-selinux-2.68-1.el7.noarch.rpm
