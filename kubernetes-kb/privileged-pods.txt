==============================================================================
PODS IN KUBE-SYSTEM CAN CREATE OBJECTS ON HOST-KUBERNETES (like certificate pod)
==============================================================================

That is possible because the token of kube-system namespace is automatically injected into kube-system pods.

The certificate-creator pod runs "kubectl" command to create the ssl secret.  
How does it get access to the cluster which is on the host?  
I did not see any kubeconfig or other config being copied over to the pod...

Pods automatically have token injected unless automountServiceToken: false is set
So pods in kube-system will have kube-system service account token by default.
Kubectl automatically will figure out it is inside a pod and use that token
https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod


==============================================================================
"PRIVILEGED" SETTING FOR A POD (like certificate pod)
==============================================================================
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged

Privileged - determines if any container in a pod can enable privileged mode. 
By default a container is not allowed to access any devices on the host, 
but a "privileged" container is given access to all devices on the host. 
This allows the container nearly all the same access as processes running on the host. 

***This is useful for containers that want to use linux capabilities like manipulating the network stack and accessing devices.

