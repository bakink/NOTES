=========================
KUBELET CONFIG FILE
=========================
https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/
(proxy to access apiserver - if not enabled already - https://kubernetes.io/docs/tasks/access-kubernetes-api/http-proxy-access-api/)

Node name = xyz0001

Check if apiserver is listening
# netstat -anp | grep 8080 (or grep kube-apiserver)
tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      7663/kube-apiserver  

If apiserver is not listening, start a proxy:
https://kubernetes.io/docs/tasks/access-kubernetes-api/http-proxy-access-api/
kubectl proxy --port=8080

curl -sSL "http://localhost:8080/api/v1/nodes/xyz0001/proxy/configz"
--> for node xyz0001

Get current configuration for the node:
https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet:
NODE_NAME="the-name-of-the-node-you-are-reconfiguring"; curl -sSL "http://localhost:8080/api/v1/nodes/${NODE_NAME}/proxy/configz" | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' > kubelet_configz_${NODE_NAME}

Note: You need to manually add the kind and apiVersion to the downloaded object, because those fields are not reported by the configz endpoint.

Edit the configuration file
Using a text editor, change one of the parameters in the file generated by the previous procedure. For example, you might edit the parameter eventRecordQPS, that controls rate limiting for event recording.

Push the configuration file to the control plane
Push the edited configuration file to the control plane with the following command:
kubectl -n kube-system create configmap my-node-config --from-file=kubelet=kubelet_configz_${NODE_NAME} --append-hash -o yaml

This is an example of a valid response:
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: 2017-09-14T20:23:33Z
  name: my-node-config-gkt4c2m4b2
  namespace: kube-system
  resourceVersion: "119980"
  uid: 946d785e-998a-11e7-a8dd-42010a800006
data:
  kubelet: |
    {...}


Set the Node to use the new configuration
Edit the Nodeâ€™s reference to point to the new ConfigMap with the following command:

kubectl edit node ${NODE_NAME}
In your text editor, add the following YAML under spec:

configSource:
    configMap:
        name: CONFIG_MAP_NAME # replace CONFIG_MAP_NAME with the name of the ConfigMap
        namespace: kube-system
        kubeletConfigKey: kubelet

Observe that the Node begins using the new configuration
kubectl get nodes ${NODE_NAME} -o json | jq '.status.config'
The following is an example response:

{
  "active": {
    "configMap": {
      "kubeletConfigKey": "kubelet",
      "name": "my-node-config-9mbkccg2cc",
      "namespace": "kube-system",
      "resourceVersion": "1326",
      "uid": "705ab4f5-6393-11e8-b7cc-42010a800002"
    }
  },
  "assigned": {
    "configMap": {
      "kubeletConfigKey": "kubelet",
      "name": "my-node-config-9mbkccg2cc",
      "namespace": "kube-system",
      "resourceVersion": "1326",
      "uid": "705ab4f5-6393-11e8-b7cc-42010a800002"
    }
  },
  "lastKnownGood": {
    "configMap": {
      "kubeletConfigKey": "kubelet",
      "name": "my-node-config-9mbkccg2cc",
      "namespace": "kube-system",
      "resourceVersion": "1326",
      "uid": "705ab4f5-6393-11e8-b7cc-42010a800002"
    }
  }
}
