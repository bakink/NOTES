=========================
PODS
=========================

https://linuxthegreat.wordpress.com/2017/10/17/installing-kubernetes-1-8-1-on-centos-7/ - basic nginx with nodeport forward
https://neuvector.com/network-security/advanced-kubernetes-networking/
https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/
https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/

http://kubernetesbyexample.com/services/ --> services

Playgrounds:
https://www.katacoda.com/courses/kubernetes/playground
https://labs.play-with-k8s.com/

================
FIRST TRIAL
================
https://linuxthegreat.wordpress.com/2017/10/17/installing-kubernetes-1-8-1-on-centos-7/
https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
http://containertutorials.com/get_started_kubernetes/k8s_example.html


NOTE: THIS FAILED - details below

----------------------
CREATE YAML nginx.yaml
----------------------
# https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/
#apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
apiVersion: apps/v1beta2 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
        
----------------------
CREATE IT
----------------------
# kubectl apply -f nginx-deployment-kubsite.yml

# kubectl get pods
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-5c689d88bb-f8l2r   1/1     Running   0          14h
nginx-deployment-5c689d88bb-ptcfz   1/1     Running   0          14h

# kubectl get deployments
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   2         2         2            2           14h

- VERIFY

On nodes:
# docker ps |grep ngin
fead827c5d51        nginx                  "nginx -g 'daemon of…"   9 minutes ago       Up 9 minutes                            k8s_nginx_nginx-85c8f76bb5-df77c_default_ea105e8c-f220-11e8-b2d7-080027104420_0
45f39e64f72b        k8s.gcr.io/pause:3.1   "/pause"                 10 minutes ago      Up 10 minutes                           k8s_POD_nginx-85c8f76bb5-df77c_default_ea105e8c-f220-11e8-b2d7-080027104420_0

- DESCRIBE

# kubectl describe pod nginx-deployment
Name:               nginx-deployment-5c689d88bb-5w47h
Namespace:          default
Priority:           0
PriorityClassName:  <none>
Node:               k02/192.168.11.102
Start Time:         Thu, 29 Nov 2018 10:48:59 +0530
Labels:             app=nginx
                    pod-template-hash=5c689d88bb
Annotations:        <none>
Status:             Running
IP:                 192.168.2.3
Controlled By:      ReplicaSet/nginx-deployment-5c689d88bb
Containers:
  nginx:
    Container ID:   docker://00d5eeab91699a41576430475ac62a84179e32b3822089eebd6c03df49888a02
    Image:          nginx:1.7.9
    Image ID:       docker-pullable://nginx@sha256:e3456c851a152494c3e4ff5fcc26f240206abac0c9d794affb40e0714846c451
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 29 Nov 2018 10:49:00 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-z8mrv (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  default-token-z8mrv:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-z8mrv
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  9m29s  default-scheduler  Successfully assigned default/nginx-deployment-5c689d88bb-5w47h to k02
  Normal  Pulled     9m29s  kubelet, k02       Container image "nginx:1.7.9" already present on machine
  Normal  Created    9m28s  kubelet, k02       Created container
  Normal  Started    9m28s  kubelet, k02       Started container

Name:               nginx-deployment-5c689d88bb-psj4h
Namespace:          default
Priority:           0
PriorityClassName:  <none>
Node:               k01/192.168.11.101
Start Time:         Thu, 29 Nov 2018 10:48:59 +0530
Labels:             app=nginx
                    pod-template-hash=5c689d88bb
Annotations:        <none>
Status:             Running
IP:                 192.168.1.4
Controlled By:      ReplicaSet/nginx-deployment-5c689d88bb
Containers:
  nginx:
    Container ID:   docker://e639440d41fef17888464fb5f2106eaae050649f67608e73c68a771c59dee058
    Image:          nginx:1.7.9
    Image ID:       docker-pullable://nginx@sha256:e3456c851a152494c3e4ff5fcc26f240206abac0c9d794affb40e0714846c451
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 29 Nov 2018 10:49:00 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-z8mrv (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  default-token-z8mrv:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-z8mrv
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  9m29s  default-scheduler  Successfully assigned default/nginx-deployment-5c689d88bb-psj4h to k01
  Normal  Pulled     9m28s  kubelet, k01       Container image "nginx:1.7.9" already present on machine
  Normal  Created    9m28s  kubelet, k01       Created container
  Normal  Started    9m28s  kubelet, k01       Started container

- DESCRIBE SERVICE
http://kubernetesbyexample.com/services/

# kubectl describe svc nginx-service
Name:                     nginx-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=nginx
Type:                     NodePort
IP:                       10.99.53.183
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  31945/TCP
Endpoints:                192.168.1.4:80,192.168.2.3:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>

--------------------------------------------
EXPOSE PORT - 'WITHIN' THE CLUSTER
--------------------------------------------
Note: This command will create service with the name “nginx-service”. 
Service will be accessible on the port given by “–port” option for the “–target-port”. 
Target port will be of pod. Service will be accessible within the cluster only. 
In order to access it using your host IP “NodePort” option will be used.

# kubectl expose deployment nginx-deployment --name=nginx-service --port=80 --target-port=80 --type=NodePort

# kubectl get svc
NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1      <none>        443/TCP        19h
nginx-service   NodePort    10.99.53.183   <none>        80:31945/TCP   7s

Explanation: https://linuxthegreat.wordpress.com/2017/10/17/installing-kubernetes-1-8-1-on-centos-7/
  The expose command abocewill create service with the name “nginx-service”. 
  Service will be accessible on the port given by “–port” option for the “–target-port”. 
  Target port will be of pod. Service will be accessible within the cluster only. 
  In order to access it using your host IP “NodePort” option will be used.

  –type=NodePort :- when this option is given k8s tries to find out  one of free port in the range 30000-32767 
  on all the VMs of the cluster and binds the underlying service with it. 
  If no such port found then it will return with an error.

- GET PORT FORWARD INFO
# iptables-save | grep ngin
-A KUBE-NODEPORTS -p tcp -m comment --comment "default/nginx-service:" -m tcp --dport 31945 -j KUBE-MARK-MASQ
-A KUBE-NODEPORTS -p tcp -m comment --comment "default/nginx-service:" -m tcp --dport 31945 -j KUBE-SVC-GKN7Y2BSGW4NJTYL
-A KUBE-SERVICES ! -s 192.168.0.0/16 -d 10.99.53.183/32 -p tcp -m comment --comment "default/nginx-service: cluster IP" -m tcp --dport 80 -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d 10.99.53.183/32 -p tcp -m comment --comment "default/nginx-service: cluster IP" -m tcp --dport 80 -j KUBE-SVC-GKN7Y2BSGW4NJTYL

- CONNECT

Note: In the following get svc listing, service-ip is the cluster-ip and its port is the first (80) in PORT(S)
      As we have exposed NodePort also, we can use master or worker host IPs and use the second IP (31945) in PORT(S)
NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
nginx-service   NodePort    10.99.53.183   <none>        80:31945/TCP   7s

-- Connect using service-ip 
TBD: This hung
# curl -I http://10.99.53.183:80

-- Connect using host port (31945 is port of host machine as in the KUBE-NODEPORTS in iptables and also showing in get svc)
# curl -I http://192.168.11.101:31945
HTTP/1.1 200 OK
Server: nginx/1.7.9
Date: Thu, 29 Nov 2018 06:03:26 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 23 Dec 2014 16:25:09 GMT
Connection: keep-alive
ETag: "54999765-264"
Accept-Ranges: bytes

Or, use browser and go to: http://192.168.11.101:31945
You will get "welcome nginx" page

-- Connect to cluster IP
TBD: Not working
# curl cluster-ip port
# curl 10.99.53.183 80
--> TBD - This just hung and timed out

--------------------------------------------
REMOVE SERVICE
--------------------------------------------
# kubectl delete service nginx-deployment
service "nginx-deployment" deleted

# kubectl delete deployment nginx-deployment
deployment.extensions "nginx" deleted

[root@k00 pods]# kubectl get pods
No resources found.
[root@k00 pods]# kubectl get deployments
No resources found.
[root@k00 pods]# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   19h


======================================
APPENDIX - VARIOUS CHECKS
======================================
https://stackoverflow.com/questions/50527633/kubernetes-cluster-ip-unreachable

# kubectl get ep
# kubectl get endpoints

# kubectl get svc
# kubectl get pods
# kubectl get namespaces

# kubectl get pods
# kubectl get pods --all-namespaces

# kubectl get deployments
# kubectl get deployments --all-namespaces

