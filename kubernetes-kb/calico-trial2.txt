=====================================================================================================
KUBERNETS WITH CALICO - VBOX VMs, KUBEADM INIT (NO SEPARATE VMs, JUST DEFAULT METHOD OF INSTALLATION)
=====================================================================================================

Main doc: https://docs.projectcalico.org/v3.4/getting-started/kubernetes/
https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/calico-network-policy/#creating-a-local-calico-cluster-with-kubeadm
Then, https://docs.projectcalico.org/v3.4/getting-started/kubernetes/tutorials/simple-policy

For prod:
https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/

=======================================
ROUTABLE/NON-ROUTABLE IP RANGES
=======================================
https://stackoverflow.com/questions/528538/non-routable-ip-address
For IPV4 the non-routable addresses ranges are from 10.1.1.1 to 10.255.255.254, 
from 172.16.1.1 to 172.31.255.254, and from 192.168.1.1 to 192.168.255.254. 
These IP addresses will not be recognized outside of a private network.

=======================================
WHAT IPS TO USE
=======================================
kc00:
VM IP (intnet) - 192.168.11.100
VM IP (bridged/host-only) - TBD TBD - 192.168.21.100
KUBERNETES POD IP CIDR  - 172.16.0.0/16  (https://serverfault.com/questions/931061/helm-i-o-timeout-kubernetes)
--> Don't use the same range as VM (like 192.168.0.0) - which seemed to cause problems in earlier calico trial

=================
MASTER
=================

- Create a working directory (optional)
# mkdir /root/kubeinstall
# cd /root/kubeinstall

------------------
INSTALL SOFTWARE
------------------
NOTE: This part is common to master and nodes

Install docker
Install kubelet, kubeadm, ....

---------------------------------
DISABLE SELINUX
---------------------------------
# setenforce 0

Edit the file /etc/sysconfig/selinux and set enforcing as disabled

---------------------------------
DISABLE SWAP
---------------------------------
# swapoff -a

Edit /etc/fstab and comment out line of swap
#/dev/mapper/ol-swap     swap                    swap    defaults        0 0

---------------------------------
ENABLE br_netfilter
---------------------------------
# modprobe br_netfilter
# echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

Also, put it in /etc/sysctl.conf as follows:
net.bridge.bridge-nf-call-iptables = 1

And, make it persistent:
# sysctl -p

---------------------------------
START SERVICES
---------------------------------
# systemctl enable docker
# systemctl enable kubelet
# service docker start

---------------------------------
KUBEADM PULL IMAGES
---------------------------------
# kubeadm config images pull 

---------------------------------
PULL SOME USEFUL IMAGES
---------------------------------
# docker pull nginx
# docker pull busybox
# docker pull busybox:1.28

==== BACKUP THE VM NOW

==================================
INITIALIZE CLUSTER - KUBEADM INIT
==================================
# kubeadm init --apiserver-advertise-address=192.168.11.100 --pod-network-cidr=172.16.0.0/16 --ignore-preflight-errors=all
Note: If 192.168.0.0/16 is already in use within your network you must select a different pod network CIDR, 
      replacing 192.168.0.0/16 in the above command as well as in any manifests applied below.
     
JOIN TOKEN - LOOK AT THE END OF THE SCREEN OUTPUT BELOW

[root@kc00 ~]# kubeadm init --apiserver-advertise-address=192.168.11.100 --pod-network-cidr=172.16.0.0/16 --ignore-preflight-errors=all
[init] Using Kubernetes version: v1.13.3
[preflight] Running pre-flight checks
	[WARNING NumCPU]: the number of available CPUs 1 is less than the required 2
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.2. Latest validated version: 18.06
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Activating the kubelet service
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [kc00 localhost] and IPs [192.168.11.100 127.0.0.1 ::1]
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [kc00 localhost] and IPs [192.168.11.100 127.0.0.1 ::1]
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kc00 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.11.100]
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 23.504478 seconds
[uploadconfig] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.13" in namespace kube-system with the configuration for the kubelets in the cluster
[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "kc00" as an annotation
[mark-control-plane] Marking the node kc00 as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node kc00 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: djto7p.04vgmpibcp70pyv3
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstraptoken] creating the "cluster-info" ConfigMap in the "kube-public" namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.11.100:6443 --token djto7p.04vgmpibcp70pyv3 --discovery-token-ca-cert-hash sha256:91fe17336fa414c572656ffc56b3bec1275fabfe8c6f688ca1fd9f1220fff78c

- CREATE .KUBE FOLDER AND FILES

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

- VERIFY

# kubectl get pods --all-namespaces
NAMESPACE     NAME                           READY   STATUS    RESTARTS   AGE
kube-system   coredns-86c58d9df4-2bs2h       0/1     Pending   0          9m18s
kube-system   coredns-86c58d9df4-j9xk9       0/1     Pending   0          9m18s
kube-system   etcd-kc00                      1/1     Running   0          8m22s
kube-system   kube-apiserver-kc00            1/1     Running   0          8m43s
kube-system   kube-controller-manager-kc00   1/1     Running   0          8m26s
kube-system   kube-proxy-wj48z               1/1     Running   0          9m18s
kube-system   kube-scheduler-kc00            1/1     Running   0          8m15s

# kubectl get svc --all-namespaces
NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE
default       kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP         10m
kube-system   kube-dns     ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP   10m

=======================
INSTALL CALICO
=======================

-----------------------
INSTALL ETCD FOR CALICO - SEPARATE ETCD - NOT SAME AS THAT FOR KUBERNETES
-----------------------
Install an etcd instance with the following command.
--> NOTE: This is NOT the kubernetes' own etcd - this is an etcd for calico (see it installs as calico-etcd)

# kubectl apply -f \
https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/etcd.yaml

--> Screen output
daemonset.extensions/calico-etcd created
service/calico-etcd created

-----------------------
INSTALL CALICO
-----------------------
Install Calico with the following command.

# kubectl apply -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml
Note: You can also view the YAML in a new tab.
