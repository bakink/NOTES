===================================
NGINX INGRESS CONTROLLER
===================================

Based on:
K8's own Nginx ingress (directed by concept doc) 
https://github.com/kubernetes/ingress-nginx
https://github.com/kubernetes/ingress-nginx/blob/master/README.md
https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md

ALSO, for applications and ingress examples:
https://stackpointcloud.com/community/tutorial/configure-and-manage-a-kubernetes-haproxy-ingress-controller#!
https://www.haproxy.com/blog/haproxy_ingress_controller_for_kubernetes/

Concept doc:
Ingress concept (k8 docs) - https://kubernetes.io/docs/concepts/services-networking/ingress/#what-is-ingress

Other community nginx-ingress:
https://github.com/kubernetes/contrib/blob/master/ingress/controllers/nginx/examples/default/rc-default.yaml

Nginx Corp ingress controller:
https://github.com/nginxinc/kubernetes-ingress/blob/master/docs/installation.md
Note: This is quite elegant - namespace concept etc.

===================================
INSTALLATION OF INGRESS CONTOLLER
===================================
https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md

-----------------
'MANDATORY' STEP
-----------------
SHORT STEPS - AS THE STANDARD STEPS FAILED (SEE FAILED STEPS SECTION BELOW)

~~~~~~~~~
pod.yaml
~~~~~~~~~
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
---

~~~~~~~~~
svc.yaml
~~~~~~~~~
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---

===================================
CREATE THE APPLICATION PODS
===================================

------------------------------------------
CREATE AN APPLICATION TO USE WITH INGRESS
------------------------------------------
From: https://stackpointcloud.com/community/tutorial/configure-and-manage-a-kubernetes-haproxy-ingress-controller#!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ONE MAIN APP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Note: This itself seems to be nginx

- Test after pod create: 
# curl  http://192.168.1.88:8080/
CLIENT VALUES:
client_address=192.168.1.1
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://192.168.1.88:8080/

SERVER VALUES:
server_version=nginx: 1.10.0 - lua: 10001

HEADERS RECEIVED:
accept=*/*
host=192.168.1.88:8080
user-agent=curl/7.29.0
BODY:
-no body in request-


- YAML file: echoheaders.yaml

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: echoheaders
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: echoheaders
    spec:
      containers:
      - name: echoheaders
        image: gcr.io/google_containers/echoserver:1.4
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          periodSeconds: 1
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 10
---
apiVersion: v1
kind: Service
metadata:
  name: echoheaders
  labels:
    app: echoheaders
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: echoheaders  

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A DEFAULT BACKEND FOR URLS WITHOUT SPECIFIC ENDPOINTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Test after pod create: 
# curl  http://192.168.1.89:8080/
default backend - 404

- YAML file:  default-http-backend.yaml

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: default-http-backend
spec:
  replicas: 2
  selector:
    app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: default-http-backend

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
game-app.yaml - A STATIC PAGE 'GAME' APP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Test after pod create: 
# curl  http://192.168.1.90:80/
...
...
This site is the official version of 2048
...
...

- YAML file:  default-http-backend.yaml

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: game2048
  labels:
    name: game2048
spec:
  replicas: 2
  selector:
    name: game2048
  template:
    metadata:
      labels:
        name: game2048
        version: stable
    spec:
      containers:
      - name: game2048
        image: alexwhen/docker-2048
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: game2048
  labels:
    name: game2048
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: game2048

===========================
LIST PODS AND SERVICES
===========================
# kubectl get pods -o wide
NAME                                        READY   STATUS    RESTARTS   AGE     IP             NODE   NOMINATED NODE
default-http-backend-bnv6c                  1/1     Running   0          12m     192.168.1.89   k01    <none>
default-http-backend-qrxs8                  1/1     Running   0          12m     192.168.2.51   k02    <none>
echoheaders-d6spf                           1/1     Running   0          16m     192.168.1.88   k01    <none>
game2048-2lb9m                              1/1     Running   0          7m20s   192.168.1.90   k01    <none>
game2048-nn8t7                              1/1     Running   0          7m20s   192.168.2.52   k02    <none>
nginx-ingress-controller-77c6567795-mb6zr   1/1     Running   0          28s     192.168.2.53   k02    <none>

# kubectl get svc
NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
default-http-backend   ClusterIP   10.105.17.190    <none>        80/TCP                       12m
echoheaders            ClusterIP   10.104.129.24    <none>        80/TCP                       16m
game2048               ClusterIP   10.96.38.41      <none>        80/TCP                       7m25s
ingress-nginx          NodePort    10.111.237.110   <none>        80:30433/TCP,443:30236/TCP   9s
kubernetes             ClusterIP   10.96.0.1        <none>        443/TCP                      20d


==========================
APPENDIX
==========================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
== FAILED STEPS OF INGRESS CONTROLLER CREATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
These standard steps in the doc failed - as some thigs did not work out very well for some reason
- CREATE THE INGRESS CONTROLLER POD (AS DEPLOYMENT)
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml

namespace/ingress-nginx created
configmap/nginx-configuration created
configmap/tcp-services created
configmap/udp-services created
serviceaccount/nginx-ingress-serviceaccount created
clusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created
role.rbac.authorization.k8s.io/nginx-ingress-role created
rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created
clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created
deployment.extensions/nginx-ingress-controller created

- CREATE SERVICE WITH NODEPORT TO ACCESS THE INGRESS CONTROLLER POD
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/baremetal/service-nodeport.yaml
service/ingress-nginx created
