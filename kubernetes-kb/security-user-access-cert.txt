https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#define-clusters-users-and-contexts


------------------------------------------------------
CREATE A USER CERT FOR KUBE-SYSTEM NAMESPACE
------------------------------------------------------

ca-config.json :

{
  "signing": {
    "default": {
      "expiry": "87600h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "87600h"
      }
    }
  }
}



user-kubesystem-csr.json file:

{
  "CN": "user-kubesystem",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "IN",
      "L": "INDIA",
      "O": "INDIA",
      "OU": "Kubernetes",
      "ST": "Kubernetes"
    }
  ]
}

Run command: (user-kubesystem-gen.sh)

cfssl gencert \
-ca=/etc/kubernetes/pki/ca.pem \
-ca-key=/etc/kubernetes/pki/ca-key.pem \
-config=ca-config.json \
-profile=kubernetes user-kubesystem-csr.json | \
cfssljson -bare admin

This will produce:

user-kubesystem.pem
user-kubesystem-key.pem
user-kubesystem.csr

------------------------------------------------------------------
SET THE CLUSTER WITH CLUSTER'S CA CERT IN A LOCAL KUBECONFIG FILE
------------------------------------------------------------------
- SYNTAX
kubectl config --kubeconfig=config-demo set-cluster development --server=https://1.2.3.4 --certificate-authority=fake-ca-file

- ACTUAL
kubectl config --kubeconfig=user-cert-config set-cluster kubernetes-dev \
--server=https://192.168.8.11 \
--certificate-authority=/etc/kubernetes/pki/ca.pem

-----------------------
ADD USER'S CREDENTIALS
-----------------------
- SYNTAX
kubectl config --kubeconfig=config-demo set-credentials developer --client-certificate=fake-cert-file --client-key=fake-key-seefile

- ACTUAL
kubectl config --kubeconfig=user-cert-config set-credentials user-for-kube-system \
--client-certificate=user-kubesystem.pem \
--client-key=user-kubesystem-key.pem
--embed-certs=true

----------------------------------------------
ADD CONTEXT FOR THIS USER-CLUSTER COMBINATION
----------------------------------------------
- SYNTAX 
kubectl config --kubeconfig=config-demo set-context dev-frontend --cluster=development --namespace=frontend --user=developer

- ACTUAL
kubectl config --kubeconfig=user-cert-config set-context ns-kube-system \
--cluster=kubernetes-dev \
--namespace=kube-system \
--user=user-for-kube-system

-----------------------
VERIFY
-----------------------
kubectl config --kubeconfig=user-cert-config view
--> This should list the contents of user-cert-config file

-----------------------
USE THE CONTEXT
-----------------------
- SYNTAX
kubectl config --kubeconfig=config-demo use-context dev-frontend

- ACTUAL
kubectl config --kubeconfig=user-cert-config use-context ns-kube-system

- VERIFY
kubectl config --kubeconfig=user-cert-config current-context
--> This should show ns-kube-system as the current context

-----------------------
GET THE PODS
-----------------------
TBD - SOMEHOW, THIS SHOWS DEFAULT NAMESPACE PODS - NOT KUBE-SYSTEM NAMESPACE PODS
# kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
alpine                           1/1     Running   4          4d1h
alpine-dep-57f9cd5b48-hgfgg      1/1     Running   14         4d2h
alpine-dep-cm-5459c7fbdf-nmdkj   1/1     Running   6          4d2h
alpine-pod-cm-envvar             1/1     Running   4          45h
alpine-pod-cm-envvar2            1/1     Running   4          45h
busybox                          1/1     Running   4          4d1h


