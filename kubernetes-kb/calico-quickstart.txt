=============
CALICO FOR K8
=============

Main doc: https://docs.projectcalico.org/v3.4/getting-started/kubernetes/
https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/calico-network-policy/#creating-a-local-calico-cluster-with-kubeadm

For prod:
https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/

Issues:
Calico-node keeps crashing:
https://github.com/projectcalico/calico/issues/1806 --> mine
https://success.docker.com/article/fix-ucp-calico-for-rp-filter
    --> This seemed to work
    On host: in /etc/sysctl.conf set the rp_filter to 1 instead of 2
    and then do "sysctl -p"
    
    # oracle-database-server-12cR2-preinstall setting for net.ipv4.conf.all.rp_filter is 2
    #net.ipv4.conf.all.rp_filter = 2
    net.ipv4.conf.all.rp_filter = 1

    # oracle-database-server-12cR2-preinstall setting for net.ipv4.conf.default.rp_filter is 2
    #net.ipv4.conf.default.rp_filter = 2
    net.ipv4.conf.default.rp_filter = 1

Issue:
join node uses nat interface of node - need to make it use correct interface
https://docs.projectcalico.org/v3.4/usage/configuration/node

=======================================
Quickstart for Calico on Kubernetes
=======================================
https://docs.projectcalico.org/v3.4/getting-started/kubernetes/

Overview
This quickstart gets you a single-host Kubernetes cluster with Calico in approximately 15 minutes. You can use this cluster for testing and development.

To deploy a cluster suitable for production, refer to Installation.

Requirements
AMD64 processor
2CPU
2GB RAM
10GB free disk space
RedHat Enterprise Linux 7.x+, CentOS 7.x+, Ubuntu 16.04+, or Debian 9.x+
Before you begin
Ensure that Calico can manage cali and tunl interfaces on the host. If NetworkManager is present on the host, refer to Configure NetworkManager.

Follow the Kubernetes instructions to install kubeadm.

Note: After installing kubeadm, do not power down or restart the host. Instead, continue directly to the next section to create your cluster.

Create a single-host Kubernetes cluster
As a regular user with sudo privileges, open a terminal on the host that you installed kubeadm on.

Initialize the master using the following command.

sudo kubeadm init --pod-network-cidr=192.168.0.0/16
Note: If 192.168.0.0/16 is already in use within your network you must select a different pod network CIDR, replacing 192.168.0.0/16 in the above command as well as in any manifests applied below.

Execute the following commands to configure kubectl (also returned by kubeadm init).

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install an etcd instance with the following command.

kubectl apply -f \
https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/etcd.yaml
Note: You can also view the YAML in a new tab.

You should see the following output.

daemonset.extensions/calico-etcd created
service/calico-etcd created

Install Calico with the following command.

kubectl apply -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml
Note: You can also view the YAML in a new tab.

You should see the following output.

configmap/calico-config created
secret/calico-etcd-secrets created
daemonset.extensions/calico-node created
serviceaccount/calico-node created
deployment.extensions/calico-kube-controllers created
serviceaccount/calico-kube-controllers created
clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrole.rbac.authorization.k8s.io/calico-node created
clusterrolebinding.rbac.authorization.k8s.io/calico-node created
Confirm that all of the pods are running with the following command.

watch kubectl get pods --all-namespaces

Wait until each pod has the STATUS of Running.

NAMESPACE    NAME                                       READY  STATUS   RESTARTS  AGE
kube-system  calico-etcd-x2482                          1/1    Running  0         2m45s
kube-system  calico-kube-controllers-6ff88bf6d4-tgtzb   1/1    Running  0         2m45s
kube-system  calico-node-24h85                          2/2    Running  0         2m43s
kube-system  coredns-846jhw23g9-9af73                   1/1    Running  0         4m5s
kube-system  coredns-846jhw23g9-hmswk                   1/1    Running  0         4m5s
kube-system  etcd-jbaker-1                              1/1    Running  0         6m22s
kube-system  kube-apiserver-jbaker-1                    1/1    Running  0         6m12s
kube-system  kube-controller-manager-jbaker-1           1/1    Running  0         6m16s
kube-system  kube-proxy-8fzp2                           1/1    Running  0         5m16s
kube-system  kube-scheduler-jbaker-1                    1/1    Running  0         5m41s
Press CTRL+C to exit watch.

Remove the taints on the master so that you can schedule pods on it.

kubectl taint nodes --all node-role.kubernetes.io/master-
It should return the following.

node/<your-hostname> untainted
Confirm that you now have a node in your cluster with the following command.

kubectl get nodes -o wide
It should return something like the following.

NAME              STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION    CONTAINER-RUNTIME
<your-hostname>   Ready    master   52m   v1.12.2   10.128.0.28   <none>        Ubuntu 18.04.1 LTS   4.15.0-1023-gcp   docker://18.6.1
Congratulations! You now have a single-host Kubernetes cluster equipped with Calico.


- NETWORK AND PODS AT THIS TIME:
[root@kc0 etc]# ip addr list
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:10:44:20 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s3
       valid_lft 79432sec preferred_lft 79432sec
    inet6 fe80::2481:bef7:e0d6:5810/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:7b:13:15 brd ff:ff:ff:ff:ff:ff
    inet 192.168.11.110/24 brd 192.168.11.255 scope global noprefixroute enp0s8
       valid_lft forever preferred_lft forever
    inet6 fe80::5270:6f3b:6966:ad14/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
4: enp0s9: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:ca:34:38 brd ff:ff:ff:ff:ff:ff
    inet 192.168.11.120/24 brd 192.168.11.255 scope global noprefixroute enp0s9
       valid_lft forever preferred_lft forever
    inet6 fe80::b331:1d54:d60b:62c1/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
5: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 52:54:00:cc:ab:31 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever
6: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 500
    link/ether 52:54:00:cc:ab:31 brd ff:ff:ff:ff:ff:ff
7: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 02:42:b1:96:9c:20 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
8: calic748c2d3b23@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc noqueue state UP group default 
    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet6 fe80::ecee:eeff:feee:eeee/64 scope link 
       valid_lft forever preferred_lft forever
9: calib049b0cc1c0@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc noqueue state UP group default 
    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet6 fe80::ecee:eeff:feee:eeee/64 scope link 
       valid_lft forever preferred_lft forever
10: tunl0@NONE: <NOARP,UP,LOWER_UP> mtu 1440 qdisc noqueue state UNKNOWN group default 
    link/ipip 0.0.0.0 brd 0.0.0.0
    inet 192.168.0.0/32 brd 192.168.0.0 scope global tunl0
       valid_lft forever preferred_lft forever

# netstat -anp |grep cali
tcp        0      0 127.0.0.1:9099          0.0.0.0:*               LISTEN      23129/calico-node   
tcp        0      0 10.0.2.15:15665         10.96.232.136:6666      ESTABLISHED 23129/calico-node   
tcp        0      0 10.0.2.15:15636         10.96.232.136:6666      ESTABLISHED 22941/calico-node   
tcp        0      0 10.0.2.15:15664         10.96.232.136:6666      ESTABLISHED 23129/calico-node   
unix  2      [ ACC ]     STREAM     LISTENING     313078   22978/bird6          /var/run/calico/bird6.ctl
unix  2      [ ACC ]     STREAM     LISTENING     313084   22977/bird           /var/run/calico/bird.ctl

# iptables-save|grep calico
-A KUBE-SERVICES ! -s 192.168.0.0/16 -d 10.96.232.136/32 -p tcp -m comment --comment "kube-system/calico-etcd: cluster IP" -m tcp --dport 6666 -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d 10.96.232.136/32 -p tcp -m comment --comment "kube-system/calico-etcd: cluster IP" -m tcp --dport 6666 -j KUBE-SVC-NTYB37XIWATNM25Y

# kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES
kube-system   calico-etcd-cw79p                          1/1     Running   1          45h   192.168.11.110   kc0    <none>           <none>
kube-system   calico-kube-controllers-5d94b577bb-9ccj5   1/1     Running   3          45h   192.168.11.110   kc0    <none>           <none>
kube-system   calico-node-j6zg8                          1/1     Running   21         45h   192.168.11.110   kc0    <none>           <none>
kube-system   coredns-86c58d9df4-dcl97                   1/1     Running   1          46h   192.168.0.3      kc0    <none>           <none>
kube-system   coredns-86c58d9df4-kh5wv                   1/1     Running   1          46h   192.168.0.4      kc0    <none>           <none>
kube-system   etcd-kc0                                   1/1     Running   1          46h   192.168.11.110   kc0    <none>           <none>
kube-system   kube-apiserver-kc0                         1/1     Running   1          46h   192.168.11.110   kc0    <none>           <none>
kube-system   kube-controller-manager-kc0                1/1     Running   1          46h   192.168.11.110   kc0    <none>           <none>
kube-system   kube-proxy-57qqj                           1/1     Running   1          46h   192.168.11.110   kc0    <none>           <none>
kube-system   kube-scheduler-kc0                         1/1     Running   1          46h   192.168.11.110   kc0    <none>           <none>

------------
ADD NODE
------------
# kubeadm join 192.168.11.110:6443 --token d2xaus.sh3382dgq1j2d6gu --discovery-token-ca-cert-hash sha256:a424dae28f46be50fb286b4052ad585a4af4a43f1db6a314af34e937a6fd1060
NOTE: This joined with NAT address of first interface enps03 instead of enps08

# kubectl get nodes -o wide
NAME   STATUS   ROLES    AGE    VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                  KERNEL-VERSION                  CONTAINER-RUNTIME
kc0    Ready    master   46h    v1.13.1   192.168.11.110   <none>        Oracle Linux Server 7.5   4.1.12-112.16.4.el7uek.x86_64   docker://18.9.0
kc1    Ready    <none>   2m3s   v1.13.1   10.0.2.15        <none>        Oracle Linux Server 7.5   4.1.12-112.16.4.el7uek.x86_64   docker://18.9.0

- TO MAKE IT USE correct interface enps08
Try https://docs.projectcalico.org/v3.4/usage/configuration/node

============
Next steps
============
Secure a simple application using the Kubernetes NetworkPolicy API

Control ingress and egress traffic using the Kubernetes NetworkPolicy API

Create a user interface that shows blocked and allowed connections in real time

Install and configure calicoctl

===================
CALICOCTL
===================
wget https://github.com/projectcalico/calicoctl/releases/download/v2.0.2/calicoctl
