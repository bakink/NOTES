PROMISE AND ASSOCIATED STUFF


DIFFERENCE BETWEEN MAP AND FLATMAP
map = change the value of the promise
flatmap = change the promise itself via other functions that use the value of the initial promise

MAP - transforms the value alone 
- EXAMPLE - it may transform a array to a single element of the array by picking the required one only


FLATMAP - provides a new promise 
- by taking the input promise and using it for the transformation function which will return a different promise altogether
- EXAMPLE - get a db/vm sepcification which is in a Promise<map or struct> 
            then pass that to a migration-request creator (which can be an async/blocking function)
            and that migration-request becomes the newly created promise
- Essentially, it is more than just 'map' - map changes the promise value alone, and flatmap passes 

map
default <O> Promise<O> map(Function<? super T,? extends O> transformer)
Transforms the promised value by applying the given function to it.

flatMap
default <O> Promise<O> flatMap(Function<? super T,? extends Promise<O>> transformer)
Transforms the promised value by applying the given function to it that returns a promise for the transformed value.
This is useful when the transformation involves an asynchronous operation.
